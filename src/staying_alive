#!/bin/bash

# Configurable files and period (can be set via env or command line)
INPUT_FILE="${INPUT_FILE:-$HOME/.staying-alive/to_keep_alive.txt}"
LOG_FILE="${LOG_FILE:-$HOME/.staying-alive/staying_alive_timestamps.log}"
PERIOD="${PERIOD:-1w}"

# Parse command line arguments
FORCE_RUN=0
CHECK_PERIOD=0
while [[ $# -gt 0 ]]; do
    case "$1" in
        -f|--force)
            FORCE_RUN=1
            shift
            ;;
        -c|--check-period)
            CHECK_PERIOD=1
            shift
            ;;
        -p|--period)
            PERIOD="$2"
            shift 2
            ;;
        -i|--input-file)
            INPUT_FILE="$2"
            shift 2
            ;;
        -l|--log-file)
            LOG_FILE="$2"
            shift 2
            ;;
        *)
            echo "Unknown argument: $1" >&2
            exit 1
            ;;
    esac
done

# Check if input file exists
if [ ! -f "$INPUT_FILE" ]; then
    echo "Error: $INPUT_FILE not found" >&2
    exit 1
fi


# Converts a period string to a format accepted by GNU date
convert_period_for_date() {
    local period="$1"
    local result=""
    local part re num unit

    # Split by spaces
    for part in $period; do
        if [[ "$part" =~ ^([0-9]+)w$ ]]; then
            num="${BASH_REMATCH[1]}"
            result+="$((num * 7)) days "
        elif [[ "$part" =~ ^([0-9]+)d$ ]]; then
            num="${BASH_REMATCH[1]}"
            result+="$num days "
        elif [[ "$part" =~ ^([0-9]+)h$ ]]; then
            num="${BASH_REMATCH[1]}"
            result+="$num hours "
        elif [[ "$part" =~ ^([0-9]+)m$ ]]; then
            num="${BASH_REMATCH[1]}"
            result+="$num minutes "
        elif [[ "$part" =~ ^([0-9]+)s$ ]]; then
            num="${BASH_REMATCH[1]}"
            result+="$num seconds "
        elif [[ "$part" =~ ^([0-9]+)M$ ]]; then
            num="${BASH_REMATCH[1]}"
            result+="$num months "
        elif [[ "$part" =~ ^([0-9]+)y$ ]]; then
            num="${BASH_REMATCH[1]}"
            result+="$num years "
        elif [[ "$part" =~ ^([0-9]+)ms$ ]]; then
            result+="1 seconds "
            echo "Warning: milliseconds not supported, rounding up to 1 second" >&2
        elif [[ "$part" =~ ^([0-9]+)us$ ]]; then
            result+="1 seconds "
            echo "Warning: microseconds not supported, rounding up to 1 second" >&2
        else
            result+="$part "
        fi
    done

    # Trim trailing space
    echo "${result%" "}"
}

# Convert PERIOD to a format accepted by 'date'
PERIOD_ARG="$(convert_period_for_date "$PERIOD")"

# Check if log file exists and is recent enough (unless forced)
if [ "$FORCE_RUN" -eq 0 ] && [ -f "$LOG_FILE" ]; then
    last_run=$(tail -n 1 "$LOG_FILE" 2>/dev/null)
    if [ -n "$last_run" ]; then
        last_run_ts=$(date -d "$last_run" +%s)
        period_ago=$(date -d "$PERIOD_ARG ago" +%s)
        if [ "$last_run_ts" -gt "$period_ago" ]; then
            if [ "$CHECK_PERIOD" -eq 1 ]; then
                echo "Last run was less than $PERIOD ago ($last_run), would exit."
                exit 1
            else
                echo "Last run was less than $PERIOD ago ($last_run), exiting."
                echo "Use --force or -f to run anyway."
                exit 0
            fi
        fi
    fi
fi

if [ "$CHECK_PERIOD" -eq 1 ]; then
    # If we reach here, it's OK to run
    echo "OK: staying-alive could run now."
    exit 0
fi

# Process each line in input file in parallel
pids=()
args=()
while IFS= read -r arg || [ -n "$arg" ]; do
    [ -z "$arg" ] && continue
    echo "Running poke_files with argument: $arg"
    poke_files "$arg" &
    pid=$!
    pids+=($pid)
    args+=("$arg")
done < "$INPUT_FILE"

# Wait for all background jobs to finish and check for errors, printing as they finish
fail=0
declare -A pid_to_arg
for i in "${!pids[@]}"; do
    pid="${pids[$i]}"
    arg="${args[$i]}"
    pid_to_arg["$pid"]="$arg"
done

remaining_pids=("${pids[@]}")
while ((${#remaining_pids[@]})); do
    new_remaining=()
    for pid in "${remaining_pids[@]}"; do
        if kill -0 "$pid" 2>/dev/null; then
            # Still running
            new_remaining+=("$pid")
        else
            # Finished, check status
            if wait "$pid"; then
                echo "process completed for arg ${pid_to_arg[$pid]}"
            else
                echo "process completed for arg ${pid_to_arg[$pid]} (FAILED)" >&2
                fail=1
            fi
        fi
    done
    remaining_pids=("${new_remaining[@]}")
    if ((${#remaining_pids[@]})); then
        sleep 2
    fi
done

if [ $fail -ne 0 ]; then
    echo "One or more poke_files processes failed." >&2
fi

# Append timestamp to log
timestamp=$(date +"%Y-%m-%d %H:%M:%S")
echo "$timestamp" >> "$LOG_FILE"

echo "Completed at $timestamp"